<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Untitled">
    <title>Why?</title>
    <body>
        <p>There are plenty of different existing serializers that allow producing XML output.
            However, a lot of them enforce a strong scheme on the generated XML. <ph keyref="projectname"/> allows
            generating XML files with a generic data format that can also be used efficiently within
            other XML processing applications.</p>
        <p>Consider the following class:</p>
        <p><image href="../../uml/exports/svg/Misc!Example_01_2.svg"/></p>
        <p>Or represented as C++ classes:</p>
        <codeblock outputclass="language-cpp"><![CDATA[class color {
public:
	std::string name;
	int red;
	int blue;
	int green;
};

class car {
public:
	std::string manufacturer;
	std::string model;
	int year_of_construction;
	color color;
};]]></codeblock>
        <p>Many generic serializers with XML backends would generate the following XML (or similar):</p>
        <codeblock outputclass="language-xml"><![CDATA[<value>
  <value type="string">Jeep</value>
  <value type="string">Grand Cherokee</value>
  <value type="int">2009</value>
  <valuelist>
    <value type="string">Black</value>
    <value type="int">0</value>
    <value type="int">0</value>
    <value type="int">0</value>
  </valuelist>
</value>]]></codeblock>
        <p>This works fine as long as the produced XML content is only used by the class/software that
            serialized and deserialized to/from it. However, if the produced XML should also be used
            outside of that class/software it's very tedious to work with as it's not clear what the
            values refer to.</p>
        <p>The goal of <ph keyref="projectname"/> is to produce XML that consists of a more generic structure that can also be
            used by other applications:</p>
        <codeblock outputclass="language-xml"><![CDATA[<car>
  <manufacturer>Jeep</manufacturer>
  <model>Grand Cherokee</model>
  <year_of_construction>2009</year_of_construction>
  <color>
    <name>Black</name>
    <red>0</red>
    <green>0</green>
    <blue>0</blue>
  </color>
</car>]]></codeblock>
        <p>Furthermore, <ph keyref="projectname"/> provides comments and attributes which allow to
            take advantage of more powerful XML tools/techniques when processing the generated XML
            outside of the application which (de)serializes it:</p>
        <codeblock outputclass="language-xml"><![CDATA[<car>
  <manufacturer>Jeep</manufacturer>
  <model>Grand Cherokee</model>
  <year_of_construction>2009</year_of_construction>
  <color name="Black" format="rgb">
    <red depth="32">0</red>
    <green depth="32">0</green>
    <blue depth="32">0</blue>
  </color>
</car>]]></codeblock>
        <p><ph keyref="projectname"/> also provides several <xref href="archiver_xml_settings.dita">configuration options</xref> to still annotate the element types if
            desired so:</p>
        <codeblock outputclass="language-xml"><![CDATA[<car>
  <manufacturer gpds:type="string">Jeep</manufacturer>
  <model gpds:type="string">Grand Cherokee</model>
  <year_of_construction gpds:type="int">2009</year_of_construction>
  <color gpds:type="nested">
    <red gpds:type="int">0</red>
    <green gpds:type="int">0</green>
    <blue gpds:type="int">0</blue>
  </color>
</car>]]></codeblock>
    </body>
</topic>
